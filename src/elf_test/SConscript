import os

from SCons.Environment import Environment
from build_scripts.utility import GlobRecursive, FindIndex, IsFileName


Import('TARGET_ENVIRONMENT')
TARGET_ENVIRONMENT: Environment

env = TARGET_ENVIRONMENT.Clone()
env.Append(
    LINKFLAGS = [
        '-Wl,-T', env.File('linker.ld').srcnode().path,
        '-Wl,-Map=' + env.File('elf_test.map').path
    ],
    CPPPATH = [ env.Dir('.').srcnode(), env["ROOTDIR"].Dir('src/libs') ],
    ASFLAGS = [ '-I', env.Dir('.').srcnode(), '-f', 'elf' ]
)

sources = GlobRecursive(env, '*.c') + \
          GlobRecursive(env, '*.cpp') + \
          GlobRecursive(env, '*.asm')

objects = env.Object(sources)
obj_crti = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crti.o')))
obj_crtn = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crtn.o')))

Import('libcore')

static_libs = [
    libcore,
]

objects = [
    obj_crti,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtbegin.o'),
    *objects,
    *static_libs,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtend.o'),
    obj_crtn
]


test_elf = env.Program('test_elf.elf', objects)

test_elf_stripped = env.Command('test_elf-stripped.elf', test_elf, '$STRIP -o $TARGET $SOURCE');
env.Default(test_elf_stripped)

Export('test_elf')
Export('test_elf_stripped')
